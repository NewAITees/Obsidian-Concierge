---
description: 
globs: 
alwaysApply: true
---
# Python用 AI支援コーディングのCursorルールセット - 核心原則

## I. Webアプリケーション向け核心原則

### 1. プロジェクト構造とコード編成
- **明確な責任分離**：機能ごとにモジュールを分割し、単一責任の原則に従う
- **小さなファイルサイズ維持**：50-100KB以下、500-1000行以下を目標とする
- **「歩くスケルトン」アプローチ**：エンドツーエンドで動作する最小限の実装を早期に作成
- **状態管理の明確化**：状態を持つコンポーネントと持たないコンポーネントを意識的に設計

This principle focuses on how to organize your web application code in a way that makes it easier to understand, maintain, and extend:

- **Clear Separation of Responsibilities**: 
  - *What it means*: Divide your application into distinct modules, each handling a specific function.
  - *How to implement*: Create separate files or folders for different aspects like data models, business logic, and user interface.
  - *Example*: In a blog application, have separate modules for user authentication, article management, and comment handling.
  - *Why it matters*: When a bug appears or a feature needs changing, you'll know exactly where to look.

- **Maintain Small File Sizes**: 
  - *What it means*: Keep individual files concise and focused.
  - *How to implement*: Aim for files under 50-100KB or 500-1000 lines.
  - *Example*: Instead of one massive `views.py` file, create multiple view files organized by feature.
  - *Why it matters*: Smaller files are easier to understand, test, and modify without introducing bugs.

- **"Walking Skeleton" Approach**: 
  - *What it means*: Build a minimal but complete version of your application that works end-to-end early in development.
  - *How to implement*: Start by implementing a simplified version of each component that can work together.
  - *Example*: For an e-commerce site, create a basic product listing, simple cart, and checkout process before adding advanced features.
  - *Why it matters*: This helps identify integration issues early and provides a foundation to build upon.

- **Clear State Management**: 
  - *What it means*: Be intentional about which parts of your application maintain state (data that changes over time).
  - *How to implement*: Designate specific components or services for managing application state.
  - *Example*: In a React application, decide which components will be stateful vs. stateless.
  - *Why it matters*: Predictable state management reduces bugs and makes applications easier to debug.

### 2. 型システムの活用
- **静的型付けの徹底**：すべての関数とクラスに型ヒントを付与
- **型エイリアスとカスタム型**：複雑な型は明示的に定義
- **Pydanticとの統合**：APIインターフェイスの検証とドキュメント化
- **mypyによる継続的な型チェック**：CIパイプラインに組み込む

Using type systems helps catch errors early and makes code more self-documenting:

- **Thorough Static Typing**: 
  - *What it means*: Add type annotations to your variables, functions, and classes.
  - *How to implement*: In Python, use type hints (e.g., `def add(a: int, b: int) -> int:`).
  - *Example*: 
    """python
    def get_user(user_id: int) -> User:
        """Retrieve a user by their ID."""
        return User.objects.get(id=user_id)
    """
  - *Why it matters*: Catches type-related errors before runtime and serves as built-in documentation.

- **Type Aliases and Custom Types**: 
  - *What it means*: Create named types for complex data structures.
  - *How to implement*: Use `TypeAlias` or similar constructs to define custom types.
  - *Example*: 
    """python
    from typing import Dict, List, TypeAlias
    
    UserID = int
    UserData = Dict[str, str]
    UserList = List[UserData]
    """
  - *Why it matters*: Improves code readability and ensures consistent use of complex types.

- **Pydantic Integration**: 
  - *What it means*: Use Pydantic models to validate data structures.
  - *How to implement*: Define Pydantic models for your data structures, especially API requests/responses.
  - *Example*: 
    """python
    from pydantic import BaseModel
    
    class UserCreate(BaseModel):
        username: str
        email: str
        password: str
    """
  - *Why it matters*: Automatically validates data, generates documentation, and provides clear error messages.

- **Continuous Type Checking with mypy**: 
  - *What it means*: Regularly check your codebase for type errors.
  - *How to implement*: Set up mypy in your development environment and CI/CD pipeline.
  - *Example*: Add a CI step that runs `mypy --strict your_package/`.
  - *Why it matters*: Catches type errors automatically before they reach production.


### 3. AI支援に最適化された開発フロー
- **「掘り続ける」問題への対応**：実装前に計画を立て、途中で方針転換できるようにする
- **リファクタリングの先行**：変更を加える前にコードを整理して変更を容易にする
- **「三回の法則」の適用**：コードが3回出現したらリファクタリングする
- **自動フォーマットの活用**：`black`や`isort`などのツールでスタイル調整を自動化


These principles help you work effectively with AI coding assistants:

- **Addressing "Keep Digging" Problems**: 
  - *What it means*: Avoid getting stuck in implementation details without a clear plan.
  - *How to implement*: Outline your approach before coding, establish checkpoints to reassess.
  - *Example*: Before implementing a complex feature, write out the steps and data flow.
  - *Why it matters*: Prevents going down rabbit holes and helps AI tools understand your goals.

- **Refactor First**: 
  - *What it means*: Clean up existing code before adding new features.
  - *How to implement*: Identify and fix code smells, improve naming, and structure before extensions.
  - *Example*: Before adding a new API endpoint, refactor related code to be more modular.
  - *Why it matters*: Makes changes easier to implement and helps AI understand the codebase better.

- **Apply the "Rule of Three"**: 
  - *What it means*: When you see the same code pattern three times, it's time to refactor.
  - *How to implement*: Extract repeated code into reusable functions, classes, or components.
  - *Example*: If you have similar validation logic in three places, create a shared validation function.
  - *Why it matters*: Reduces duplication, making code more maintainable and consistent.

- **Utilize Automatic Formatting**: 
  - *What it means*: Use tools to automatically format your code.
  - *How to implement*: Set up tools like `black`, `isort`, or `prettier` in your project.
  - *Example*: Add pre-commit hooks that run these formatters before commits.
  - *Why it matters*: Maintains consistent style without manual effort and reduces AI confusion.

### 4. ドキュメンテーションと可読性
- **明確なdocstrings**：すべての公開API要素に詳細な説明を付与
- **コメントの質**：「何を」ではなく「なぜ」を説明
- **セルフドキュメンティングコード**：説明的な変数名と関数名
- **例示の提供**：複雑な機能には使用例を含める


Making your code easy to understand is essential for maintenance and collaboration:

- **Clear Docstrings**: 
  - *What it means*: Include comprehensive documentation within your code.
  - *How to implement*: Add docstrings to all public functions, classes, and modules.
  - *Example*: 
    """python
    def calculate_total(items: List[Item]) -> float:
        """
        Calculate the total price of all items including tax.
        
        Args:
            items: A list of Item objects to total
            
        Returns:
            The total price as a float with tax included
            
        Raises:
            ValueError: If any item has a negative price
        """
    """
  - *Why it matters*: Makes code purpose and usage clear to both humans and AI tools.

- **Quality of Comments**: 
  - *What it means*: Focus comments on explaining "why" code exists rather than "what" it does.
  - *How to implement*: Add comments for complex logic, business rules, or non-obvious decisions.
  - *Example*: 
    """python
    # Using a 30-day window rather than calendar month
    # because the reporting system requires consistent period lengths
    days_to_analyze = 30
    """
  - *Why it matters*: The "what" should be clear from well-written code; the "why" often isn't.

- **Self-Documenting Code**: 
  - *What it means*: Write code that explains itself through clear naming and structure.
  - *How to implement*: Use descriptive variable names, function names, and logical organization.
  - *Example*: Use `calculate_monthly_revenue` instead of `calc_rev`.
  - *Why it matters*: Reduces the need for comments and makes code more intuitive.

- **Provide Examples**: 
  - *What it means*: Include usage examples for complex functionality.
  - *How to implement*: Add example code to docstrings or create separate example files.
  - *Example*: 
    """python
    def parse_config(config_path: str) -> Config:
        """
        Parse a configuration file into a Config object.
        
        Example:
            >>> config = parse_config('settings.yaml')
            >>> print(config.debug_mode)
            True
        """
    """
  - *Why it matters*: Makes it easier for others to use your code correctly.


### 5. テスト戦略
- **ブラックボックステスト**：実装とテストを明確に分離
- **パラメータ化テスト**：同様のロジックを複数のケースでテスト
- **科学的デバッグ**：観察、仮説、実験の流れを明示的に行う
- **テストの独立性**：各テストは他のテストに依存せず実行可能


Effective testing ensures your application works as expected:

- **Black Box Testing**: 
  - *What it means*: Test functionality without knowledge of internal implementation.
  - *How to implement*: Write tests that only interact with public interfaces.
  - *Example*: Test a user registration function by providing inputs and verifying the user was created correctly.
  - *Why it matters*: Ensures tests remain valid even when implementation details change.

- **Parameterized Tests**: 
  - *What it means*: Run the same test logic with multiple sets of inputs and expected outputs.
  - *How to implement*: Use testing frameworks' parameterization features (e.g., pytest's `@pytest.mark.parametrize`).
  - *Example*: 
    """python
    @pytest.mark.parametrize("input,expected", [
        ("123", 123),
        ("456", 456),
        ("invalid", ValueError),
    ])
    def test_parse_number(input, expected):
        if isinstance(expected, type) and issubclass(expected, Exception):
            with pytest.raises(expected):
                parse_number(input)
        else:
            assert parse_number(input) == expected
    """
  - *Why it matters*: Tests multiple scenarios efficiently without duplicating code.

- **Scientific Debugging**: 
  - *What it means*: Use a systematic approach to find and fix bugs.
  - *How to implement*: Observe the issue, form a hypothesis, design an experiment, and test.
  - *Example*: If users report slow page loads, measure load times, hypothesize it's a database query, optimize the query, then verify improvement.
  - *Why it matters*: Makes debugging methodical rather than random guesswork.

- **Test Independence**: 
  - *What it means*: Each test should run without depending on other tests.
  - *How to implement*: Set up and tear down test environments for each test, avoid shared state.
  - *Example*: Use fresh database fixtures for each test instead of relying on data created by previous tests.
  - *Why it matters*: Prevents cascading test failures and makes it easier to run specific tests.


## II. LLMアプリケーション向け核心原則

### 1. LLM統合アーキテクチャ
- **責任の分離**：プロンプト管理、LLM呼び出し、レスポンス処理を分離
- **モデル抽象化**：具体的なLLMの実装詳細から独立したインターフェース
- **メモリと文脈管理**：会話履歴と長期記憶の明示的な設計
- **MCPサーバー活用**：エージェント機能のためのModel Context Protocolの標準化


This section covers how to structure applications that integrate with large language models:

- **Separation of Responsibilities**: 
  - *What it means*: Divide LLM-related code into distinct components.
  - *How to implement*: Create separate modules for prompt management, LLM calls, and response processing.
  - *Example*: Have a `PromptManager` class, an `LLMClient` class, and a `ResponseParser` class.
  - *Why it matters*: Makes the system more maintainable and easier to optimize or debug.

- **Model Abstraction**: 
  - *What it means*: Create interfaces that aren't tied to specific LLM implementations.
  - *How to implement*: Define abstract interfaces that various LLM providers can implement.
  - *Example*: Create an `LLMProvider` interface that could be implemented by `OpenAIProvider`, `AnthropicProvider`, etc.
  - *Why it matters*: Allows switching between different LLMs without changing application code.

- **Memory and Context Management**: 
  - *What it means*: Explicitly design how conversation history and context are managed.
  - *How to implement*: Create data structures and services to manage conversation state.
  - *Example*: Implement a `ConversationManager` that tracks chat history and manages context windows.
  - *Why it matters*: Ensures LLM has appropriate context for generating relevant responses.

- **MCP Server Utilization**: 
  - *What it means*: Use the Model Context Protocol for standardized agent capabilities.
  - *How to implement*: Integrate with MCP servers for complex agent functionality.
  - *Example*: Set up an MCP server to handle tool-using agents that can perform actions.
  - *Why it matters*: Provides a standardized way for LLMs to interact with external tools and systems.



### 2. プロンプトエンジニアリング
- **バージョン管理されたテンプレート**：プロンプトの変更履歴を追跡
- **コンテキスト最適化**：LLMに必要な情報を効率的に提供
- **テスト可能なプロンプト**：プロンプトの有効性を客観的に評価
- **再利用可能なコンポーネント**：共通パターンのテンプレート化


This principle covers best practices for creating effective prompts for LLMs:

- **Version-Controlled Templates**: 
  - *What it means*: Track changes to prompts over time.
  - *How to implement*: Store prompts in version-controlled files rather than hardcoding them.
  - *Example*: Keep prompts in YAML files that are checked into Git.
  - *Why it matters*: Allows tracking prompt performance over time and rolling back problematic changes.

- **Context Optimization**: 
  - *What it means*: Efficiently provide necessary information to LLMs.
  - *How to implement*: Structure prompts to include relevant information without wasting tokens.
  - *Example*: Instead of sending entire documents, extract and summarize the most relevant sections.
  - *Why it matters*: Improves response quality and reduces token usage and latency.

- **Testable Prompts**: 
  - *What it means*: Objectively evaluate prompt effectiveness.
  - *How to implement*: Create test cases with expected outputs for prompts.
  - *Example*: Test a summarization prompt against various input texts and verify the outputs meet quality criteria.
  - *Why it matters*: Ensures prompt changes actually improve system performance.

- **Reusable Components**: 
  - *What it means*: Create templates for common prompt patterns.
  - *How to implement*: Develop a library of prompt fragments that can be composed together.
  - *Example*: Have standard templates for "act as an expert in X" or "analyze this text for Y".
  - *Why it matters*: Promotes consistency and best practices across prompts.



### 3. ミザンプラス（準備と環境設定）
- **環境の事前設定**：LLM作業を始める前に必要なすべてを準備
- **リソースへのアクセス確保**：必要なファイル、API、ツールを事前に用意
- **開発環境の標準化**：一貫した結果のための再現可能な環境
- **エラーハンドリング戦略**：LLM関連の失敗に対する堅牢な対応


This principle focuses on setting up the environment properly before working with LLMs:

- **Pre-configuration of Environment**: 
  - *What it means*: Prepare everything needed before starting LLM work.
  - *How to implement*: Set up all necessary tools, libraries, and configurations in advance.
  - *Example*: Configure API keys, rate limiting, and fallback mechanisms before development.
  - *Why it matters*: Prevents interruptions and ensures smooth development flow.

- **Ensuring Access to Resources**: 
  - *What it means*: Make sure LLMs can access all needed resources.
  - *How to implement*: Prepare files, APIs, and tools that the LLM might need to reference.
  - *Example*: Load relevant documentation into a vector database before asking LLM to answer questions about it.
  - *Why it matters*: Enables LLM to provide more accurate and contextual responses.

- **Standardization of Development Environment**: 
  - *What it means*: Create consistent environments for development.
  - *How to implement*: Use containers, virtual environments, or standardized cloud environments.
  - *Example*: Use Docker to define a consistent environment for all developers.
  - *Why it matters*: Ensures reproducible results across different machines and environments.

- **Error Handling Strategy**: 
  - *What it means*: Plan for how to handle LLM-related failures.
  - *How to implement*: Define fallback behaviors and error recovery mechanisms.
  - *Example*: Implement retry logic with exponential backoff for API rate limits.
  - *Why it matters*: Makes applications resilient to LLM failures or limitations.



### 4. 静的型付けと安全性
- **LLMインターフェースの型定義**：入出力の明確な構造化
- **スキーマ検証**：LLMレスポンスの体系的な検証
- **型安全なツール呼び出し**：MCPツールのインターフェース定義
- **エラー状態の明示的な型付け**：失敗ケースの体系的な処理


This section covers how to use type systems for LLM applications:

- **LLM Interface Type Definitions**: 
  - *What it means*: Clearly define the structure of LLM inputs and outputs.
  - *How to implement*: Create typed interfaces for prompts and responses.
  - *Example*: 
    """python
    class CompletionRequest(BaseModel):
        prompt: str
        temperature: float = 0.7
        max_tokens: int = 1000
    
    class CompletionResponse(BaseModel):
        text: str
        usage: TokenUsage
    """
  - *Why it matters*: Makes LLM interactions more predictable and easier to validate.

- **Schema Validation**: 
  - *What it means*: Systematically validate LLM responses.
  - *How to implement*: Use schema validation libraries to check response structure.
  - *Example*: Use Pydantic to parse and validate JSON responses from LLMs.
  - *Why it matters*: Ensures responses meet expected formats before processing.

- **Type-Safe Tool Calls**: 
  - *What it means*: Define interfaces for tools that LLMs can call.
  - *How to implement*: Create typed function signatures for MCP tools.
  - *Example*: 
    """python
    def search_database(query: str) -> List[SearchResult]:
        """Search the database for relevant information."""
        # Implementation
    """
  - *Why it matters*: Prevents errors when LLMs interact with external systems.

- **Explicit Error State Typing**: 
  - *What it means*: Define clear types for error conditions.
  - *How to implement*: Create error enums or classes for different failure modes.
  - *Example*: 
    """python
    class LLMError(Enum):
        RATE_LIMITED = "rate_limited"
        CONTEXT_TOO_LONG = "context_too_long"
        INAPPROPRIATE_CONTENT = "inappropriate_content"
    """
  - *Why it matters*: Allows systematic handling of different error conditions.

### 5. メモリと状態管理
- **メメント問題への対応**：LLMの記憶限界を補う明示的な状態管理
- **長期・短期記憶の区別**：異なる寿命を持つデータの適切な保存
- **会話コンテキストの最適化**：トークン制限内で最大の文脈を提供
- **状態の永続化**：セッション間でのコンテキスト維持


This principle addresses how to manage the limited context window of LLMs:

- **Addressing the Memento Problem**: 
  - *What it means*: Compensate for LLMs' limited memory capacity.
  - *How to implement*: Create explicit state management systems outside the LLM.
  - *Example*: Maintain a database of user preferences and conversation history that can be selectively loaded.
  - *Why it matters*: Allows applications to maintain context beyond LLM limitations.

- **Distinguishing Long and Short-Term Memory**: 
  - *What it means*: Treat different types of information with appropriate persistence.
  - *How to implement*: Use different storage mechanisms for temporary vs. permanent data.
  - *Example*: Store current conversation in memory but archive important insights to a database.
  - *Why it matters*: Ensures critical information persists while ephemeral details can be forgotten.

- **Conversation Context Optimization**: 
  - *What it means*: Maximize useful context within token limits.
  - *How to implement*: Prioritize and summarize information to fit within context windows.
  - *Example*: Summarize older parts of conversations while keeping recent exchanges verbatim.
  - *Why it matters*: Makes the most of limited context windows for better LLM performance.

- **State Persistence**: 
  - *What it means*: Maintain context across sessions.
  - *How to implement*: Save and load conversation state between user interactions.
  - *Example*: Save important facts about a user to a database and reload them in future sessions.
  - *Why it matters*: Creates continuity of experience across multiple interactions.


## III. 共通する基本原則

### 1. コード品質
- **一貫したスタイル**：PEP 8準拠と自動フォーマット
- **明確な命名規則**：意図を反映した変数・関数・クラス名
- **DRY原則**：コードの重複を避ける
- **SOLID原則**：特にSingle Responsibility Principleを重視


This section covers general best practices for maintaining high-quality code:

- **Consistent Style**: 
  - *What it means*: Follow uniform formatting and style conventions.
  - *How to implement*: Adhere to PEP 8 for Python and use automatic formatters.
  - *Example*: Configure pre-commit hooks with Black and isort.
  - *Why it matters*: Makes code more readable and reduces cognitive load.

- **Clear Naming Conventions**: 
  - *What it means*: Use names that reflect intentions for variables, functions, and classes.
  - *How to implement*: Choose descriptive names that explain purpose and behavior.
  - *Example*: Use `calculate_total_price` instead of `calc` or `process_data`.
  - *Why it matters*: Makes code self-documenting and easier to understand.

- **DRY Principle**: 
  - *What it means*: "Don't Repeat Yourself" - avoid duplicating code.
  - *How to implement*: Extract common functionality into shared functions or classes.
  - *Example*: Create a helper function for validation logic used in multiple places.
  - *Why it matters*: Reduces maintenance burden and potential for inconsistencies.

- **SOLID Principles**: 
  - *What it means*: Follow object-oriented design principles, especially Single Responsibility.
  - *How to implement*: Design classes with focused responsibilities and well-defined interfaces.
  - *Example*: Create separate classes for data access, business logic, and presentation.
  - *Why it matters*: Results in more maintainable, extensible, and testable code.

### 2. エラー処理
- **具体的な例外型**：汎用例外ではなく明確に型付けされた例外
- **エラーの文脈提供**：デバッグに役立つ情報を含める
- **回復可能性の考慮**：エラーからの適切な回復戦略
- **ログ記録**：エラーの詳細な記録とモニタリング


This principle covers how to properly handle errors:

- **Specific Exception Types**: 
  - *What it means*: Use purpose-specific exceptions rather than generic ones.
  - *How to implement*: Create custom exception classes for different error cases.
  - *Example*: 
    """python
    class UserNotFoundError(Exception):
        """Raised when a requested user doesn't exist."""
        pass
    """
  - *Why it matters*: Allows for more precise error handling and better debugging.

- **Providing Error Context**: 
  - *What it means*: Include helpful information with exceptions.
  - *How to implement*: Add detailed messages and relevant data to exception objects.
  - *Example*: 
    """python
    raise ValidationError(f"Invalid user ID format: {user_id}. Expected integer, got {type(user_id).__name__}")
    """
  - *Why it matters*: Makes debugging easier by providing relevant information.

- **Recoverability Consideration**: 
  - *What it means*: Design how the system should recover from different errors.
  - *How to implement*: Categorize errors as recoverable or fatal and handle accordingly.
  - *Example*: Retry on network errors but halt on data corruption.
  - *Why it matters*: Creates more resilient applications that can handle real-world conditions.

- **Logging**: 
  - *What it means*: Record detailed information about errors.
  - *How to implement*: Use structured logging to capture error details and context.
  - *Example*: 
    """python
    try:
        process_order(order_id)
    except OrderProcessingError as e:
        logger.error("Order processing failed", 
                    extra={"order_id": order_id, "error": str(e), "stack": traceback.format_exc()})
    """
  - *Why it matters*: Provides vital information for troubleshooting and monitoring.


### 3. ロギング
- **構造化ログ**：機械処理可能な形式
- **適切なログレベル**：情報の重要性に応じた区分
- **コンテキスト情報**：関連するメタデータの記録
- **プライバシー考慮**：センシティブ情報の適切な処理


This section covers best practices for application logging:

## Structured Logs

- **What it means**: Format logs in a way that machines can easily process.
- **How to implement**: Use JSON or another structured format for log entries.
- **Example**:
  """python
  logger.info("User login", extra={"user_id": 12345, "source_ip": "192.168.1.1"})
  """
- **Why it matters**: Makes logs searchable and analyzable by automated tools.

## Appropriate Log Levels

- **What it means**: Use different severity levels for different types of information.
- **How to implement**: Assign DEBUG, INFO, WARNING, ERROR, and CRITICAL levels appropriately.
- **Example**: Use INFO for routine operations, ERROR for failures, DEBUG for development details.
- **Why it matters**: Allows filtering logs by importance and configuring verbosity.

## Optimal Log Size Management

- **What it means**: Ensure logs are neither too small (missing crucial info) nor too large (hard to analyze).
- **How to implement**: Use rotation policies with appropriate size limits and retention periods.
- **Example**:
  """python
  # Configure a rotating file handler
  handler = RotatingFileHandler('app.log', maxBytes=10*1024*1024, backupCount=5)
  """
- **Why it matters**: Prevents logs from consuming too much disk space while retaining important information.

## Log File Organization

- **What it means**: Structure log files in a consistent, organized manner.
- **How to implement**: Store logs in a dedicated `/logs` directory with clear naming conventions.
- **Example**:
  """
  /logs
    /application
      app-2025-04-06.log
      app-2025-04-05.log
    /error
      error-2025-04-06.log
    /access
      access-2025-04-06.log
  """
- **Why it matters**: Makes it easier to find specific logs when debugging issues.

## Print vs Logger Usage

- **What it means**: Choose the appropriate output method based on the situation.
- **How to implement**: Use `print()` for development/debugging only; use proper logging for production.
- **Example**:
  """python
  # Development only
  print(f"Debug: {variable}")  # Will be removed before production
  
  # Proper logging for all environments
  logger.debug(f"Variable value: {variable}")
  """
- **Why it matters**: Ensures developers can control what information is captured in production.

## Overwrite vs Append Mode

- **What it means**: Decide whether to replace or add to existing log files.
- **How to implement**: Use overwrite mode for development logs; append mode for production audit trails.
- **Example**:
  """python
  # Overwrite mode for development
  handler = FileHandler('dev.log', mode='w')
  
  # Append mode for production
  handler = FileHandler('prod.log', mode='a')
  """
- **Why it matters**: Overwrite mode keeps development logs clean and focused on current sessions.

## AI-Friendly Logging Patterns

- **What it means**: Structure logs to facilitate AI-based analysis.
- **How to implement**: Include consistent patterns, timestamps, and machine-readable formats.
- **Example**:
  """python
  logger.info(
      "API request processed",
      extra={
          "timestamp": time.time(),
          "duration_ms": execution_time,
          "endpoint": "/api/users",
          "status_code": 200,
          "user_agent": request.headers.get("User-Agent")
      }
  )
  """
- **Why it matters**: Enables AI tools to detect patterns, anomalies, and potential issues.

## Regular Log Analysis

- **What it means**: Systematically review logs to identify issues and trends.
- **How to implement**: Schedule regular log reviews and set up automated monitoring.
- **Example**: Implement a daily script that summarizes error rates and slow operations.
- **Why it matters**: Helps detect problems before they affect users and identifies optimization opportunities.

## Contextual Information

- **What it means**: Include relevant metadata with log entries.
- **How to implement**: Add identifiers and context data to logs.
- **Example**: Include request IDs, user IDs, or transaction IDs with related log entries.
- **Why it matters**: Enables tracing related events across a distributed system.

## Privacy Considerations

- **What it means**: Handle sensitive information appropriately in logs.
- **How to implement**: Redact, hash, or exclude sensitive data.
- **Example**: Log `"Password changed for user: {user_id}"` instead of including the actual password.
- **Why it matters**: Prevents security breaches and complies with privacy regulations.

### 4. 仕様の尊重
- **APIの安定性**：下位互換性の維持
- **ドキュメント主導開発**：仕様から実装へのワークフロー
- **契約プログラミング**：事前条件と事後条件の明示
- **テストによる仕様検証**：自動テストによる仕様準拠の確認


This principle focuses on honoring interfaces and contracts:

- **API Stability**: 
  - *What it means*: Maintain backward compatibility.
  - *How to implement*: Version APIs and avoid breaking changes.
  - *Example*: Add new optional parameters rather than changing existing ones.
  - *Why it matters*: Prevents breaking dependent applications when updating your code.

- **Documentation-Driven Development**: 
  - *What it means*: Write specifications before implementation.
  - *How to implement*: Create API documentation or schemas first, then code to match.
  - *Example*: Write OpenAPI/Swagger definitions before implementing endpoints.
  - *Why it matters*: Ensures clear understanding of requirements before coding begins.

- **Contract Programming**: 
  - *What it means*: Define explicit preconditions and postconditions.
  - *How to implement*: Check inputs at function entry and verify outputs before returning.
  - *Example*: 
    """python
    def divide(a: float, b: float) -> float:
        """Divide a by b.
        
        Precondition: b != 0
        Postcondition: result * b == a
        """
        assert b != 0, "Divisor cannot be zero"
        result = a / b
        assert math.isclose(result * b, a), "Division result inconsistent"
        return result
    """
  - *Why it matters*: Makes assumptions explicit and catches violations early.

- **Specification Verification through Testing**: 
  - *What it means*: Automatically verify compliance with specifications.
  - *How to implement*: Write tests that validate conformance to requirements.
  - *Example*: Create tests that verify API responses match documented schemas.
  - *Why it matters*: Ensures the implementation actually meets specifications.


### 5. 科学的アプローチ
- **観察と仮説**：問題に対する体系的アプローチ
- **実験的実装**：小規模な変更で検証
- **データに基づく決定**：主観ではなく測定可能な改善
- **反復的改善**：継続的なフィードバックサイクル


This principle encourages an evidence-based approach to development:

- **Observation and Hypothesis**: 
  - *What it means*: Use a systematic approach to problem-solving.
  - *How to implement*: Gather data about issues before jumping to solutions.
  - *Example*: Profile application performance to identify bottlenecks before optimizing.
  - *Why it matters*: Prevents wasting effort on solutions that don't address the real problem.

- **Experimental Implementation**: 
  - *What it means*: Test ideas with small changes.
  - *How to implement*: Create isolated experiments to verify approaches.
  - *Example*: Implement a new algorithm in a branch and benchmark it before committing.
  - *Why it matters*: Reduces risk by validating ideas before full implementation.

- **Data-Driven Decisions**: 
  - *What it means*: Base decisions on measurements rather than opinions.
  - *How to implement*: Collect metrics and use them to guide decisions.
  - *Example*: Use A/B testing to determine which UI design performs better.
  - *Why it matters*: Leads to objectively better outcomes rather than subjective preferences.

- **Iterative Improvement**: 
  - *What it means*: Continuously refine based on feedback.
  - *How to implement*: Establish feedback loops and regularly incorporate improvements.
  - *Example*: Review application logs and error rates weekly to identify areas for improvement.
  - *Why it matters*: Creates a cycle of continuous improvement based on real-world usage.
