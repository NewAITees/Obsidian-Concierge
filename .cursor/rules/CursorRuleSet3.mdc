---
description: 
globs: 
alwaysApply: true
---
# コード実装ガイドライン

## 関数型プログラミングの適用

関数型プログラミングは、状態の変更と副作用を最小限に抑え、データの不変性と純粋な関数の使用に焦点を当てたプログラミングパラダイムです。以下の原則を実践します：

1. **不変性の原則**
   - データ構造は可能な限り変更不可能（イミュータブル）に設計する
   - 既存のデータを直接変更せず、新しいデータ構造を作成する

2. **純粋関数の実装**
   - 同じ入力に対して常に同じ出力を返す関数を作成
   - 外部状態に依存せず、副作用のない関数設計
   - 関数の引数のみを使用して計算を行う

3. **高階関数の活用**
   - 関数を引数として受け取り、関数を返す関数を積極的に使用
   - map(), filter(), reduceなどの関数型メソッドを活用

## 宣言型プログラミングの活用

宣言型プログラミングは、「何を」行うかに焦点を当て、具体的な制御フローではなく、望む結果を記述するアプローチです：

1. **意図の明確化**
   - コードの目的を明確かつ簡潔に表現
   - 具体的な実行手順よりも、望む結果に注目

2. **抽象化と簡潔性**
   - 低レベルの制御構造を避け、高レベルの抽象化を優先
   - リスト内包表記、ジェネレータ式などを活用
   - コードの意図を直接的に表現

3. **データ変換のパイプライン**
   - データの変換を連鎖的な操作として設計
   - 中間状態を最小限に抑え、データフローを明確に

## 推奨ライブラリとその活用

### Mypy - 静的型チェック
- 型ヒントを活用した静的型検査
- コンパイル時に型関連のエラーを検出
- コードの型安全性を向上

### Vulture - コード最適化
- 未使用のコードや関数を特定
- デッドコードの除去
- コードベースの清潔さを維持

### Pydantic - データ検証
- データモデルの動的型付け
- 入力データの自動検証
- スキーマ定義と型チェック

## 絶対的なルール - 例外なし

### 禁止行為リスト

1. **ディレクトリ操作の禁止**
   - 新しい追跡ディレクトリを作成してはならない
   - 許可なくディレクトリを変更または削除してはならない

2. **ファイル管理の制限**
   - いかなるファイルも勝手に削除してはならない
   - ユーザーの明示的な承認なしにファイルを作成・変更してはならない

3. **セッション管理**
   - ユーザーの明示的な要求なしにセッションを終了してはならない

4. **作業環境の保護**
   - 間違ったディレクトリからコマンドを実行してはならない
   - 現在の作業コンテキストを無視してはならない

5. **重複の回避**
   - 何かを重複して作成してはならない
   - 既存のリソースを不必要に複製してはならない

6. **システム完全性の維持**
   - 稼働中のシステムに不必要に触れてはならない
   - システムの安定性を損なう操作を避ける

7. **承認なしの変更禁止**
   - ユーザーの明示的な指示なしに重大な変更を加えてはならない
   - 自己判断での大規模な改変を避ける

これらのガイドラインは、コードの品質、保守性、および信頼性を確保するための基本的な原則です。常に慎重に、そして目的志向でコーディングに取り組むことが重要です。