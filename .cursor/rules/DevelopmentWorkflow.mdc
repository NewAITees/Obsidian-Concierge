---
description: 
globs: 
alwaysApply: true
---
# 開発ワークフロー詳細ガイド

このドキュメントでは、
イシューを活用した開発プロセスのベストプラクティスを解説します
具体的にはイシューの選定から機能実装、テスト、レビュー、マージまでの全プロセスを詳細に解説します。各ステップに従うことで、一貫性のある高品質な開発フローを実現することができます。

原則あなたはこのプロセスの途中で終わることなく最後まで作業を遂行してほしいのですが、
もしプロセスの途中で処理が終わってしまいそうなときは、現在どこまで終わったのかを記録し、
次の時にはどこから最後まで終わらせることが必要なのかがわかりやすいように記載してください

## 1. イシューの選定

### 目的
作業の明確な範囲と目標を定義します。

### 詳細ステップ
1. プロジェクトのGithubのリポジトリにアクセスし、イシューボードをレビューし、優先度の高いタスクを特定します
2. 自分のスキルセットに合ったイシューを選択します
3. イシューの内容を十分に理解し、不明点があれば質問します
4. イシューに着手する旨をコメントし、担当者として自分をアサインします

### 注意点
- イシューの説明が不十分な場合は、作業を始める前に明確化を求めましょう
- 大きなイシューは小さな作業単位に分割することを検討してください

## 2. ブランチの作成

### 目的
メインコードベースから独立した作業環境を確保します。

### 詳細ステップ
1. 最新の開発ブランチ（通常は `main` または `develop`）をプルします
   ```bash
   git checkout main
   git pull origin main
   ```

2. イシュー番号とタイトルを含む命名規則に従った新しいブランチを作成します
   ```bash
   git checkout -b feature/ISSUE-123-short-description
   ```
   
   - バグ修正の場合: `bugfix/ISSUE-123-short-description`
   - 機能追加の場合: `feature/ISSUE-123-short-description`
   - リファクタリングの場合: `refactor/ISSUE-123-short-description`

### 注意点
- ブランチ名は作業内容を簡潔に表現するようにしましょう
- 一つのブランチでは一つのイシューのみに取り組むことを推奨します

## 3. 開発の実施

### 目的
イシューで提起された要件や問題に対する解決策を実装します。

### 詳細ステップ
1. 作業計画を立て、必要に応じて小さなサブタスクに分割します
2. コーディング規約とアーキテクチャガイドラインに従って実装します
3. 定期的に変更をコミットします（作業単位ごとに）
4. 変更が動作することを確認するための基本的なテストを随時行います

### 注意点
- 可読性と保守性の高いコードを心がけましょう
- わかりにくい部分にはコメントを追加しましょう
- 定期的にコミットすることで、問題が発生した場合に容易にロールバックできます

## 4. テストの作成

### 目的
実装した機能が正しく動作することを確認し、将来の変更に対する安全性を確保します。

### 詳細ステップ
1. ユニットテストを作成し、個々のコンポーネントの機能を検証します
2. 必要に応じて統合テストを追加し、コンポーネント間の連携を確認します
3. エッジケースや異常系のテストケースも考慮します
4. テストカバレッジを確認し、重要なロジックが十分にテストされていることを確認します

### 注意点
- テストは開発と並行して行うことが理想的です（TDD）
- テストコードも本番コードと同じくらい丁寧に書きましょう
- テストケースは機能の仕様書としての役割も果たします

## 5. テストの実行と検証

### 目的
実装した機能とその周辺機能が正しく動作することを確認します。

### 詳細ステップ
1. 全てのテストを実行し、パスすることを確認します
   ```bash
   npm test # または適切なテストコマンド
   ```
2. 統合テスト環境やステージング環境がある場合は、そこでも動作確認を行います
3. 手動テストも実施し、実際のユーザー体験を確認します
4. パフォーマンスや安全性についても検証します

### 注意点
- テスト失敗の原因は迅速に修正しましょう
- テスト環境と本番環境の差異に注意しましょう
- 可能であれば、異なるブラウザやデバイスでの動作確認も行いましょう

## 6. コードのコミット

### 目的
開発した変更内容をバージョン管理システムに記録します。

### 詳細ステップ
1. 変更されたファイルを確認します
   ```bash
   git status
   git diff
   ```
2. ステージングに追加します
   ```bash
   git add <files> # または git add . で全ての変更を追加
   ```
3. 変更内容を説明する明確なコミットメッセージを作成します
   ```bash
   git commit -m "[ISSUE-123] 簡潔な変更内容の説明"
   ```
4. リモートリポジトリにプッシュします
   ```bash
   git push origin feature/ISSUE-123-short-description
   ```

### 注意点
- コミットメッセージは具体的かつ明確にし、何をどう変更したかを説明しましょう
- 適切なプレフィックスを使用することも有効です（例: `[FIX]`, `[FEATURE]`, `[REFACTOR]`）
- 大きな変更は複数の小さなコミットに分割するとレビューしやすくなります

## 7. イシューの更新とクローズ

### 目的
作業の完了を報告し、イシューのライフサイクルを管理します。

### 詳細ステップ
1. イシューにコメントを追加し、実装の詳細と対応内容を説明します
2. 必要に応じてスクリーンショットや動作デモを添付します
3. イシューステータスを「レビュー待ち」や「完了」に更新します
4. イシューのクローズはプルリクエストのマージ後に自動化されている場合もあります

### 注意点
- イシューの要件が全て満たされていることを確認しましょう
- 追加で発見された問題点があれば新しいイシューとして報告しましょう

## 8. プルリクエストの作成

### 目的
コードレビューのプロセスを開始し、メインコードベースへの変更を提案します。

### 詳細ステップ
1. リポジトリのウェブインターフェース（GitHub/GitLabなど）でプルリクエストを作成します
2. プルリクエストのタイトルにはイシュー番号と簡潔な説明を含めます
   例: `[ISSUE-123] ログイン機能のバグ修正`
3. 説明文には以下の内容を含めます:
   - 変更内容の概要
   - 実装方法の詳細
   - テスト方法
   - スクリーンショットや動画（UIの変更がある場合）
   - 関連するイシューへのリンク
4. 適切なレビュアーをアサインします

### 注意点
- プルリクエストの説明は丁寧かつ詳細に書きましょう
- レビュアーが理解しやすいように、特に複雑な変更には追加の説明を付けましょう
- CI/CDパイプラインのテストが通過することを確認しましょう

## 9. コードレビュー

### 目的
コードの品質を確保し、潜在的な問題点を早期に発見します。

### 詳細ステップ（レビュアーとして）
1. コードの論理的正確さ、可読性、パフォーマンスをチェックします
2. コーディング規約やアーキテクチャガイドラインへの準拠を確認します
3. テストの十分性を評価します
4. 建設的なフィードバックをコメントとして提供します

### 詳細ステップ（開発者として）
1. レビューコメントに対応し、必要な修正を行います
2. 変更点を説明し、ディスカッションに参加します
3. 修正後に再度レビューを依頼します

### 注意点
- レビューコメントは具体的かつ建設的であるべきです
- コードレビューはコードの改善と知識共有の機会として活用しましょう
- 意見の相違がある場合は、オープンに議論しましょう

## 10. マージと後処理

### 目的
承認された変更をメインコードベースに統合します。

### 詳細ステップ
1. すべてのレビューコメントが解決され、承認が得られたことを確認します
2. CI/CDパイプラインのすべてのチェックがパスしていることを確認します
3. プルリクエストをマージします
   - マージ方法としては「Squash and merge」「Rebase and merge」「Create a merge commit」のいずれかを選択します
4. 一時的なブランチを削除します
   ```bash
   git checkout main
   git pull origin main
   git branch -d feature/ISSUE-123-short-description
   ```
5. 必要に応じてリリースノートを更新します

### 注意点
- マージ前に最新のメインブランチから変更を取り込み、コンフリクトを解消しておきましょう
- マージ後は関連する環境（ステージング、本番など）での動作確認を行いましょう
- マージ後に発生した問題は迅速に対応しましょう

## まとめ

この開発ワークフローに従うことで、チーム全体の効率と成果物の品質を高めることができます。各ステップを丁寧に実施し、継続的な改善を心がけましょう。