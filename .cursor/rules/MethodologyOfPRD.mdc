---
description: 要件整理の方法論
globs: 
alwaysApply: false
---
# 要件整理の方法論

## 1. 要件収集の基本プロセス

```mermaid
graph TD
    A[要件の初期ヒアリング] --> B[要件の分類・整理]
    B --> C[優先順位付け]
    C --> D[要件の文書化]
    D --> E[要件のレビュー・確認]
    E -->|フィードバック| B
    E -->|承認| F[要件確定]
```

## 2. シンプル化した要件分類

ローカルアプリケーション向けに、要件を以下の3カテゴリに簡素化して分類します：

- **コア（必須）**: ユーザーストーリーを満たすために絶対に必要な機能
- **サポート（補助）**: コア機能をより使いやすくする補助的な機能
- **将来（今回は含めない）**: 将来のバージョンで検討する機能

## 3. 機能要件と非機能要件の分離

### 機能要件
- システムが「何を」するかを定義
- ユーザーストーリー形式で記述：「〜として、〜したい、なぜなら〜だからだ」
- 具体的な入力と出力を明記

### 非機能要件（ローカルアプリ向け）
- システムが「どのように」機能を提供するかを定義
- 以下のカテゴリに絞って考える：
  - 使いやすさ（直感的なUI、操作の簡便さ）
  - 安定性（クラッシュしないこと）
  - インストールの容易さ
  - 保守性（コードの読みやすさ、拡張のしやすさ）
  - データの永続性（適切な保存と読み込み）

## 4. 要件の具体化テクニック

### SMART原則
各要件が以下の条件を満たすよう具体化します：
- **Specific（具体的）**: 曖昧さがなく明確か
- **Measurable（測定可能）**: 達成度を測定できるか
- **Achievable（達成可能）**: 実現可能か
- **Relevant（関連性）**: プロジェクト目標に関連しているか
- **Time-bound（期限付き）**: いつまでに達成すべきか

### 要件の検証可能性
各要件に対して以下を定義します：
- 検証方法（テスト方法、受け入れ基準）
- 期待される結果
- 検証のタイミング

## 5. 曖昧さ排除のための質問テクニック

### 5W1H法
- **Who（誰が）**: その機能を使うのは誰か
- **What（何を）**: 具体的に何をするのか
- **When（いつ）**: どのようなタイミングで使用するのか
- **Where（どこで）**: どの画面/プロセスで使用するのか
- **Why（なぜ）**: なぜその機能が必要なのか
- **How（どのように）**: どのように機能するのか

### 深掘り質問の例
- 「もう少し具体的に説明していただけますか？」
- 「その機能がない場合、どのような問題が生じますか？」
- 「理想的なシナリオでは、どのように動作すべきですか？」
- 「類似機能の例として参考になるものはありますか？」
- 「その機能の成功を測る指標は何ですか？」

## 6. 要件文書化のフォーマット

### 要件記述の標準形式
```
要件ID: REQ-001
カテゴリ: 機能要件 / 非機能要件
優先度: Must / Should / Could / Won't
タイトル: [簡潔な要件の名称]
説明: [詳細な説明]
受け入れ基準:
- [基準1]
- [基準2]
依存関係: [関連する他の要件ID]
検証方法: [どのようにこの要件の達成を確認するか]
```

### 曖昧な表現を避ける
以下のような曖昧な表現は避け、具体的な数値や基準を使用します：
- 「高速に」→「3秒以内に応答する」
- 「使いやすい」→「初めてのユーザーが説明なしで5分以内にタスクを完了できる」
- 「十分な」→「10,000ユーザーが同時アクセスしても応答時間が5秒以内である」

## 7. 要件の変更管理プロセス

```mermaid
graph TD
    A[変更要求の発生] --> B[影響分析]
    B --> C[優先度評価]
    C --> D[承認プロセス]
    D -->|承認| E[要件更新]
    D -->|却下| F[変更要求クローズ]
    E --> G[関連タスク更新]
```

- 変更履歴の記録方法
- 変更による影響範囲の特定方法
- 変更承認のワークフロー

## 8. 擬似コードによる要件具体化の例

```
FUNCTION ユーザー登録プロセス(ユーザー情報)
    // 入力: ユーザー名、メールアドレス、パスワード
    // 出力: 登録成功/失敗のステータス、エラーメッセージ
    
    IF メールアドレスの形式が無効 THEN
        RETURN 失敗, "無効なメールアドレス形式です"
    END IF
    
    IF パスワードが最小長を満たさない OR 
       パスワードが複雑性要件を満たさない THEN
        RETURN 失敗, "パスワードは8文字以上で、英字、数字、特殊文字を含む必要があります"
    END IF
    
    IF メールアドレスが既に存在 THEN
        RETURN 失敗, "このメールアドレスは既に登録されています"
    END IF
    
    ユーザーレコードをデータベースに保存
    確認メールをユーザーに送信
    
    RETURN 成功, "登録が完了しました。確認メールをご確認ください"
END FUNCTION
```

このドキュメントを活用することで、プロジェクトの要件を効果的に整理し、明確な開発指針を確立できます。