---
description: このドキュメントでは、開発者が明確に理解でき、独立して作業できるような詳細なイシューを作成するためのガイドラインを提供します。
globs: 
alwaysApply: false
---
# 効果的なイシュー作成ガイドライン

質の高いイシューは効率的な開発ワークフローの基盤となります。このドキュメントでは、開発者が明確に理解でき、独立して作業できるような詳細なイシューを作成するためのガイドラインを提供します。

## イシュー作成前の準備

### ドキュメント確認
1. プロジェクトの既存ドキュメントを確認し、関連する情報を収集します
   - 機能仕様書
   - デザインガイドライン
   - アーキテクチャドキュメント
   - API仕様書

### テスト結果の分析
1. 既存のテスト結果をレビューします
   - 失敗しているテストケース
   - カバレッジレポート
   - パフォーマンステスト結果

### 既存イシューの確認
1. 類似のイシューが既に存在していないか確認します
   - 進行中のイシュー
   - 解決済みのイシュー
   - 将来的に計画されているイシュー

2. 重複を避け、必要に応じて関連イシューにリンクします

## イシュー記述の構造

### タイトル
簡潔で明確なタイトルをつけます。以下の形式が効果的です：

```
[コンポーネント名] アクション + 対象 + 状況（必要に応じて）
```

例：
- `[ログインフォーム] パスワードリセット機能の実装`
- `[支払い処理] クレジットカード情報の暗号化強化`
- `[API] ユーザー情報取得エンドポイントのパフォーマンス最適化`

### 説明文

#### 1. 背景
- 問題点や要件が生じた背景を説明します
- ビジネス上の理由や技術的な理由を明確に記述します
- 関連する過去の経緯があれば簡潔に述べます

#### 2. 現状の問題点または要件
- 現状の課題を具体的に記述します
- バグの場合は再現手順を詳細に記述します
- 期待される動作と実際の動作の差異を明確にします

#### 3. 達成すべき目標
- 実装すべき機能や修正の明確なゴールを設定します
- 定量的な指標があれば記載します（例：ロード時間を50%短縮）
- 最低限満たすべき条件（Definition of Done）を列挙します

#### 4. 技術的詳細
- 実装に関わる技術的な情報を提供します
- 使用すべきクラスやメソッド
- データモデルの変更点
- 外部APIとの連携方法
- アーキテクチャ上の留意点

#### 5. 実装の指針
- 推奨される実装アプローチを提案します
- 回避すべき潜在的な問題点を列挙します
- パフォーマンスや安全性に関する考慮事項

#### 6. テスト方法
- 実装が正しく機能していることを確認するためのテスト方法を記述します
- 必要なテストケース
- テストデータ
- テスト環境の設定

#### 7. 参考資料・リソース
- 関連するドキュメントへのリンク
- デザインモックアップやワイヤーフレーム
- 類似実装の例
- 技術記事や参考ライブラリ

### 追加情報

#### ラベル
適切なラベルを付けて分類します：
- 種類：`bug`, `feature`, `enhancement`, `refactor`, `documentation`
- 優先度：`critical`, `high`, `medium`, `low`
- ステータス：`ready for development`, `needs design`, `blocked`

#### マイルストーン
- どのリリースやスプリントに含めるべきかを指定します

#### 推定工数
- 完了までに必要と思われる時間の見積もりを記載します
- 複雑さや不確実性に基づいてストーリーポイントを付与します

## 効果的なイシュー作成のコツ

### 明確かつ詳細に
- 曖昧な表現を避け、具体的な言葉を使います
- 「改善する」ではなく「表示速度を2秒以内にする」など
- 主観的な表現ではなく、客観的な基準を示します

### 独立して完結できるように
- イシューだけを読んで作業できるよう必要な情報をすべて含めます
- 暗黙の了解や共有されていない前提知識に依存しないようにします
- 質問が発生しないレベルの詳細さを目指します

### 視覚的な補助を活用
- スクリーンショットや図解を追加します
- バグの場合は現状と理想状態の両方を示します
- 複雑なワークフローはフローチャートで表現します

### フォーマットを整える
- マークダウンを活用して読みやすく構造化します
- 箇条書きや見出しを使って情報を整理します
- コードブロックや引用を適切に使用します
- mermaid記法やsvg記法を活用することで、視覚的にわかりやすさを向上できる場合はそれらを活用してください

## 継続的な改善

### レビューとフィードバック
- イシュー作成後に他のチームメンバーからフィードバックを受けます
- 不明確な点や情報不足がないか確認します

### テンプレートの活用
- 組織やプロジェクトに適したイシューテンプレートを作成・更新します
- 定期的にテンプレートの有効性を評価します

### 過去のベストプラクティス
- 効果的だったイシューの例を収集し、参考にします
- チーム全体で成功事例を共有します

## イシュー作成チェックリスト

イシューを作成する前に、以下のチェックリストで確認しましょう：

- [ ] タイトルは明確で具体的か
- [ ] 背景と目的が明確に記述されているか
- [ ] 現状の問題点が具体的に説明されているか
- [ ] 達成すべき目標が明確か
- [ ] 技術的詳細が十分に提供されているか
- [ ] テスト方法が記述されているか
- [ ] 関連リソースへのリンクが含まれているか
- [ ] 適切なラベル、マイルストーン、担当者が設定されているか
- [ ] 類似または重複するイシューがないことを確認したか
- [ ] 優先度と推定工数が適切に設定されているか

## まとめ

質の高いイシューは、効率的な開発プロセスの鍵となります。このガイドラインに従って、明確で詳細なイシューを作成することで、開発チーム全体の生産性と成果物の品質向上に貢献しましょう。