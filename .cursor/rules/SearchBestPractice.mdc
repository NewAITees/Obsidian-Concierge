---
description: 
globs: インターネット調査のベストプラクティス
alwaysApply: false
---
# インターネット調査のベストプラクティス

## 1. 効果的な検索戦略

```mermaid
graph TD
    A[調査テーマの特定] --> B[キーワードの抽出]
    B --> C[検索演算子の活用]
    C --> D[検索実行]
    D --> E[結果の評価]
    E -->|結果不十分| F[クエリの修正]
    F --> C
    E -->|結果満足| G[情報の整理・分析]
```

### 1.1 検索演算子の活用（DuckDuckGo & Brave対応）

| 演算子 | 説明 | 例 |
|-------|------|-----|
| `"..."` | 完全一致フレーズの検索 | `"Python async await pattern"` |
| `site:` | 特定サイト内での検索 | `site:github.com fastapi patterns` |
| `filetype:` | 特定ファイル形式の検索 | `filetype:pdf python concurrency` |
| `-` | 除外キーワード | `python threading -gil` |
| `OR` | 複数キーワードの選択 | `fastapi OR flask authentication` |

### 1.2 検索クエリ最適化プロセス

```
FUNCTION 反復的検索最適化(初期クエリ)
    // 初期検索実行
    結果 = 検索実行(初期クエリ)
    IF 結果の質が良い THEN RETURN 結果
    
    // 重要キーワード特定と不要語の除外
    重要語 = 結果から頻出関連キーワード抽出()
    不要語 = 結果からノイズキーワード特定()
    
    // クエリ改善
    改善クエリ = 初期クエリ + " " + 重要語 + " -" + 不要語
    
    // サイト指定の追加
    IF 技術的内容 THEN
        改善クエリ += " site:github.com OR site:stackoverflow.com"
    END IF
    
    RETURN 検索実行(改善クエリ)
END FUNCTION
```

### 1.3 優先度の高い情報源（技術調査向け）

1. **公式ドキュメント**: 最も信頼性が高い（常に最優先）
2. **GitHubリポジトリ**: 実装例・README・Issues（コード例を探す場合）
3. **技術リファレンス**: MDN Web Docs, Python Docs（詳細仕様確認時）
4. **StackOverflow**: 解決済みの高評価回答（問題解決時）
5. **技術ブログ**: 実装経験に基づく実践的アドバイス（応用例を探す場合）

## 2. 効果的な調査手法

### 2.1 ライブラリ評価の核心アルゴリズム

```
FUNCTION ライブラリ評価(ライブラリ名)
    評価基準 = [
        {"項目": "メンテナンス状況", "重み": 0.25, "判定": 確認最終更新日(ライブラリ名)},
        {"項目": "コミュニティ支持", "重み": 0.2, "判定": 確認GitHubスター数(ライブラリ名)},
        {"項目": "ドキュメント品質", "重み": 0.2, "判定": 評価ドキュメント充実度(ライブラリ名)},
        {"項目": "依存関係の少なさ", "重み": 0.15, "判定": 確認依存パッケージ数(ライブラリ名)},
        {"項目": "API安定性", "重み": 0.2, "判定": 評価破壊的変更履歴(ライブラリ名)}
    ]
    
    総合スコア = 0
    FOR EACH 基準 IN 評価基準
        総合スコア += 基準.判定 * 基準.重み
    END FOR
    
    代替候補 = 検索類似ライブラリ(ライブラリ名)
    
    RETURN {総合スコア, 代替候補}
END FUNCTION
```

### 2.2 エラー解決のための検索戦略

```
FUNCTION エラー解決検索(エラーメッセージ, 技術スタック)
    // 検索戦略1: 完全一致
    クエリ1 = "\"" + エラーメッセージの要約部分 + "\"" + " " + 技術スタック
    
    // 検索戦略2: エラーコードと技術名
    クエリ2 = エラーコード抽出(エラーメッセージ) + " " + 技術スタック
    
    // 検索戦略3: キーワードと症状
    クエリ3 = 技術スタック + " " + キーワード抽出(エラーメッセージ) + " solution"
    
    // 各戦略で検索し、結果を統合
    結果 = 優先度統合([検索実行(クエリ1), 検索実行(クエリ2), 検索実行(クエリ3)])
    
    RETURN 結果
END FUNCTION
```

### 2.3 API調査の基本アプローチ

```
FUNCTION API基本調査(API名)
    必須情報 = {
        "認証方法": 検索(API名 + " authentication"),
        "エンドポイント": 検索(API名 + " endpoints reference"),
        "レート制限": 検索(API名 + " rate limits"),
        "エラー処理": 検索(API名 + " error codes handling"),
        "サンプルコード": 検索(API名 + " examples python")
    }
    
    // 実際のレスポンス構造を確認
    FOR EACH エンドポイント IN 必須情報.エンドポイント.主要なもの
        レスポンス例 = 検索(API名 + " " + エンドポイント + " response example json")
        エンドポイント.レスポンス構造 = レスポンス例
    END FOR
    
    RETURN 必須情報
END FUNCTION
```

## 3. 調査結果の整理

### 3.1 調査レポートテンプレート

```markdown
# [技術/ライブラリ名] 調査レポート

## 1. 概要
- **目的**: [調査目的]
- **日付**: [YYYY-MM-DD]
- **結論**: [採用可否や主要ポイント]

## 2. 主要リソース
- [公式ドキュメント](mdc:URL)
- [GitHub](mdc:URL)
- [チュートリアル](mdc:URL)

## 3. 評価
| 項目 | 評価 | 備考 |
|-----|-----|-----|
| メンテナンス状況 | ★★★☆☆ | 最終更新: YYYY-MM-DD |
| コミュニティ支持 | ★★★★☆ | GitHub ★2.5k |
| ドキュメント品質 | ★★★☆☆ | 基本例はあるが詳細不足 |
| 依存関係 | ★★★★★ | 最小限の依存関係 |
| API安定性 | ★★★☆☆ | 1.0以降は安定 |

## 4. 代替案比較
| 代替ライブラリ | 強み | 弱み |
|------------|-----|-----|
| [代替1] | 軽量、速い | ドキュメント不足 |
| [代替2] | 機能豊富 | 重い、複雑 |

## 5. 実装アプローチ
[具体的な実装方針]

## 6. 注意点
- [制限事項や注意すべきポイント]
```

### 3.2 情報の信頼性評価

```
FUNCTION 情報信頼性評価(情報源)
    信頼性スコア = 0
    
    // 1. 情報源の種類による基本スコア
    IF 情報源.種類 == "公式ドキュメント" THEN 信頼性スコア += 5
    ELSE IF 情報源.種類 == "査読付き技術サイト" THEN 信頼性スコア += 4
    ELSE IF 情報源.種類 == "著名な技術ブログ" THEN 信頼性スコア += 3
    ELSE IF 情報源.種類 == "Q&Aサイト" THEN 信頼性スコア += 2
    ELSE 信頼性スコア += 1
    END IF
    
    // 2. 更新日による調整
    IF 情報源.更新日 < (現在日 - 365日) THEN 信頼性スコア -= 2
    ELSE IF 情報源.更新日 < (現在日 - 180日) THEN 信頼性スコア -= 1
    END IF
    
    // 3. 検証可能性による調整
    IF 情報源.コード例あり THEN 信頼性スコア += 1
    IF 情報源.参考文献あり THEN 信頼性スコア += 1
    
    RETURN 信頼性スコア  // 0-10のスケール
END FUNCTION
```

## 4. 技術別の検索キーワード設計

### 4.1 Python関連検索の最適キーワード

ライブラリ探索: `python [目的] library package`  
使用例検索: `python [ライブラリ名] example tutorial "how to"`  
エラー解決: `python [エラーメッセージの主要部分] solution fix`  
ベストプラクティス: `python [機能] best practices patterns`  
パフォーマンス改善: `python [機能] optimize performance`  

### 4.2 JavaScript/Webフレームワーク検索の最適キーワード

フレームワーク選定: `[目的] framework comparison 2025`  
コンポーネント実装: `[フレームワーク名] [コンポーネント種類] implementation`  
状態管理: `[フレームワーク名] state management pattern`  
パフォーマンス最適化: `[フレームワーク名] performance optimization techniques`  
テスト方法: `[フレームワーク名] testing strategies best practices`  

## 5. 検索エンジン別の最適化テクニック

### 5.1 DuckDuckGo特化テクニック

- バンイン活用: `!gh [リポジトリ検索]` (GitHub検索)
- バンイン活用: `!so [技術質問]` (StackOverflow検索)
- バンイン活用: `!devdocs [API/関数名]` (DevDocs検索)
- 特定サイト検索: `site:docs.python.org [検索語]`
- リージョン指定: `region:jp [検索語]` (日本のコンテンツ)

### 5.2 Brave検索特化テクニック

- 日付範囲: `[検索語] when:past6months`
- ドメイン指定: `[検索語] site:.org OR site:.edu`
- SNS検索: `[検索語] site:twitter.com`
- コードリポジトリ: `[検索語] site:github.com OR site:gitlab.com`
- 特定ファイル: `[検索語] filetype:pdf`

## 6. 検索結果の評価と優先順位付け

### 6.1 検索結果評価アルゴリズム

```
FUNCTION 検索結果優先順位付け(結果リスト)
    FOR EACH 結果 IN 結果リスト
        スコア = 0
        
        // 情報源の信頼性
        スコア += 情報源信頼性評価(結果.ドメイン) * 3
        
        // 情報の新しさ
        スコア += 情報新鮮度評価(結果.日付) * 2
        
        // コンテンツの充実度
        スコア += コンテンツ充実度評価(結果.スニペット) * 2
        
        // コード例の有無
        IF 結果.スニペット内にコード例あり THEN スコア += 3
        
        結果.優先度 = スコア
    END FOR
    
    RETURN ソート降順(結果リスト, キー="優先度")
END FUNCTION
```

### 6.2 情報鮮度評価基準

| 情報カテゴリ | 適正更新頻度 | 信頼性低下の目安 |
|------------|-------------|---------------|
| 言語基本文法 | 1-3年 | 5年以上前は要注意 |
| フレームワーク | 3-6ヶ月 | 1年以上前は要確認 |
| ライブラリAPI | 6-12ヶ月 | 2年以上前は要確認 |
| セキュリティ情報 | 1-3ヶ月 | 6ヶ月以上前は危険 |
| 開発ツール | 3-6ヶ月 | 1年以上前は要確認 |

## 7. 調査結果の活用と知識管理

### 7.1 技術調査結果の効果的な記録

```
FUNCTION 技術調査記録(トピック, 調査結果)
    // 構造化された形式で保存
    エントリ = {
        "トピック": トピック,
        "調査日": 現在日付(),
        "主要情報源": [結果.重要情報源],
        "核心ポイント": 抽出重要ポイント(調査結果),
        "コード例": 抽出代表的コード例(調査結果),
        "参考リンク": 抽出重要リンク(調査結果),
        "有効期限タグ": 判定情報有効期限(トピック)
    }
    
    保存技術知識ベース(エントリ)
    RETURN エントリID
END FUNCTION
```

### 7.2 知識のメンテナンスサイクル

1. **定期レビュー**: 技術カテゴリに応じた頻度でレビュー
2. **有効性確認**: 特に重要な情報は定期的に最新情報と照合
3. **補完調査**: 不足情報の特定と追加調査
4. **廃止フラグ**: 古くなった情報に「廃止予定」フラグを付与
5. **関連付け**: 新しい知識と既存知識を相互リンク